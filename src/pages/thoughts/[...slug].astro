---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import ArticleSchema from '../../components/schemas/ArticleSchema.astro';
import BreadcrumbSchema from '../../components/schemas/BreadcrumbSchema.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();
const site = 'https://thisaru.me';
const canonicalURL = new URL(Astro.url.pathname, site);
const imageUrl = post.data.image?.startsWith('http')
  ? post.data.image
  : post.data.image
    ? site + post.data.image
    : site + '/og-image.jpg';


// Find related posts (sharing at least one tag, excluding current post)
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter(p => p.slug !== post.slug && p.data.tags && post.data.tags && p.data.tags.some(tag => post.data.tags!.includes(tag)))
  .slice(0, 3);

// Create breadcrumb items
const breadcrumbItems = [
  { name: 'Home', url: site },
  { name: 'Thoughts', url: `${site}/thoughts/` },
  { name: post.data.title, url: canonicalURL.toString() }
];

// Estimate word count for better SEO
const contentText = post.body || '';
const wordCount = contentText.split(/\s+/).length;
---

<Layout
  title={`${post.data.title} | Thisaru`}
  description={post.data.description}
  image={imageUrl}
>
  <!-- Blog-specific JSON-LD Schema -->
  <ArticleSchema
    title={post.data.title}
    description={post.data.description}
    author={post.data.author}
    publishDate={post.data.pubDate}
    url={canonicalURL.toString()}
    image={imageUrl}
    keywords={post.data.tags}
    category={post.data.tags?.[0] || "Technology"}
    wordCount={wordCount}
    slot="head"
  />
  <BreadcrumbSchema items={breadcrumbItems} slot="head" />

  <Header />
  <main>
    <article class="py-20">
      <div class="container max-w-3xl">
        <header class="mb-12">
          <h1 class="heading-1 mb-4">{post.data.title}</h1>
          <div class="flex items-center gap-4 text-text-muted">
            <time datetime={post.data.pubDate.toISOString()}>
              {post.data.pubDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
            </time>
            <span>â€¢</span>
            <span>{post.data.author}</span>
          </div>
          {post.data.tags && (
            <div class="flex gap-2 mt-4">
              {post.data.tags.map((tag) => (
                <span class="text-sm text-accent-orange">#{tag}</span>
              ))}
            </div>
          )}
        </header>
        <div class="prose prose-invert prose-lg max-w-none">
          <Content />
        </div>
        {relatedPosts.length > 0 && (
          <section class="bg-background-card border border-accent-cyan/40 rounded-xl shadow-lg p-6 mt-16">
            <h2 class="heading-3 mb-6 text-accent-cyan">Related Posts</h2>
            <div class="space-y-6">
              {relatedPosts.map((related) => (
                <a href={`/thoughts/${related.slug}/`} class="block group rounded-lg hover:bg-accent-cyan/10 transition-colors p-3 -mx-3">
                  <h3 class="text-lg font-semibold group-hover:text-accent-cyan transition-colors">{related.data.title}</h3>
                  <p class="text-text-muted mt-1">{related.data.description}</p>
                  <div class="flex items-center gap-4 mt-2">
                    <time class="text-xs text-text-muted" datetime={related.data.pubDate.toISOString()}>
                      {related.data.pubDate.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      })}
                    </time>
                  </div>
                </a>
              ))}
            </div>
          </section>
        )}
      </div>
    </article>
  </main>
  <Footer />
</Layout>

<script>
  // Process external links after the content is rendered
  document.addEventListener('DOMContentLoaded', () => {
    const links = document.querySelectorAll('.prose a[href^="http"]');
    links.forEach(link => {
      link.setAttribute('target', '_blank');
      link.setAttribute('rel', 'noopener noreferrer');
    });
  });
</script>
