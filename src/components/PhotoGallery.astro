---
interface Image {
  src: string;
  alt: string;
  caption?: string;
  categories?: string[];
  featured?: boolean;
}

interface Props {
  images: Image[];
  columns?: number;
}

const { images, columns = 3 } = Astro.props;
---

<div class="photo-gallery">
  <div class={`grid grid-cols-1 md:grid-cols-2 gap-6 ${
    columns === 2 ? 'lg:grid-cols-2' : 
    columns === 3 ? 'lg:grid-cols-3' : 
    columns === 4 ? 'lg:grid-cols-4' : 
    'lg:grid-cols-3'
  }`}>
    {images.map((image, index) => (
      <div
        class="gallery-item bg-background-card rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 cursor-pointer"
        data-categories={image.categories ? JSON.stringify(image.categories) : "[]"}
        data-gallery-item={index}
      >
        <div class="aspect-video overflow-hidden relative group">
          <img
            src={image.src}
            alt={image.alt}
            class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
            loading="lazy"
          />
          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300"></div>
          {image.categories && image.categories.length > 0 && (
            <div class="absolute top-3 right-3 flex flex-wrap gap-1 justify-end">
              {image.categories.map(cat => (
                <span class="bg-accent-cyan text-background text-xs px-2 py-1 rounded-full">
                  {cat}
                </span>
              ))}
            </div>
          )}
          {image.featured && (
            <span class="absolute top-3 left-3 bg-accent-orange text-background text-xs px-2 py-1 rounded-full">
              Featured
            </span>
          )}
        </div>
        <div class="p-4">
          {image.caption && (
            <h3 class="text-text font-medium">{image.caption}</h3>
          )}
          <div class="mt-2 flex justify-between items-center">
            <span class="text-xs text-text-muted">Click to view</span>
            <button class="text-accent-cyan hover:text-accent-orange transition-colors" aria-label="View larger">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<!-- Mobile-optimized lightbox with swipe support -->
<div id="lightbox" class="fixed inset-0 bg-black/95 z-50 hidden flex-col items-center justify-center backdrop-blur-sm">
  <!-- Close button -->
  <button id="close-lightbox" class="absolute top-2 right-2 text-white bg-black/30 rounded-full p-2 hover:bg-black/50 transition-colors z-10" aria-label="Close">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>

  <!-- Main content area with swipe handling -->
  <div class="w-full h-full flex-1 relative touch-pan-y" id="lightbox-content">
    <!-- Navigation arrows for desktop -->
    <button id="prev-image" class="hidden md:flex absolute left-2 top-1/2 -translate-y-1/2 text-white bg-black/30 rounded-full p-2 hover:bg-black/50 transition-colors z-10" aria-label="Previous image">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
      </svg>
    </button>
    <button id="next-image" class="hidden md:flex absolute right-2 top-1/2 -translate-y-1/2 text-white bg-black/30 rounded-full p-2 hover:bg-black/50 transition-colors z-10" aria-label="Next image">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
      </svg>
    </button>

    <!-- Image container with swipe capability -->
    <div class="w-full h-full flex items-center justify-center p-4">
      <img id="lightbox-image" src="" alt="" class="max-w-full max-h-full object-contain rounded-lg" width="800" height="600" />
    </div>
  </div>

  <!-- Caption and metadata section -->
  <div class="w-full p-4 bg-black/50">
    <div id="lightbox-caption" class="text-white text-lg font-medium text-center"></div>
    <div id="lightbox-categories" class="flex gap-2 justify-center mt-2 flex-wrap"></div>

    <!-- Pagination indicators -->
    <div class="flex justify-center mt-4 gap-1" id="pagination-dots">
      <!-- Dots will be added by JS -->
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryItems = document.querySelectorAll('.gallery-item');
    const lightbox = document.getElementById('lightbox');
    const lightboxContent = document.getElementById('lightbox-content');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxCaption = document.getElementById('lightbox-caption');
    const lightboxCategories = document.getElementById('lightbox-categories');
    const paginationDots = document.getElementById('pagination-dots');
    const closeButton = document.getElementById('close-lightbox');
    const prevButton = document.getElementById('prev-image');
    const nextButton = document.getElementById('next-image');

    let currentIndex = 0;
    let touchStartX = 0;
    let touchEndX = 0;

    const images = Array.from(galleryItems).map((item) => {
      const img = item.querySelector('img');
      const index = parseInt(item.getAttribute('data-gallery-item') || '0');
      const caption = item.querySelector('h3')?.textContent || '';
      const categoriesAttr = item.getAttribute('data-categories') || '[]';
      const categories = JSON.parse(categoriesAttr);
      return { src: img?.src || '', alt: img?.alt || '', caption, categories, index };
    });

    // Create pagination dots
    function createPaginationDots() {
      if (!paginationDots) return;

      paginationDots.innerHTML = '';
      images.forEach((_, index) => {
        const dot = document.createElement('div');
        dot.className = `w-2 h-2 rounded-full ${index === currentIndex ? 'bg-accent-cyan' : 'bg-white/50'}`;
        dot.setAttribute('data-index', index.toString());
        paginationDots.appendChild(dot);

        // Make dots clickable
        dot.addEventListener('click', () => {
          showImage(index);
        });
      });
    }

    function showImage(index) {
      if (index < 0) index = images.length - 1;
      if (index >= images.length) index = 0;

      currentIndex = index;
      const image = images[index];

      if (lightboxImage && lightboxImage instanceof HTMLImageElement) {
        lightboxImage.src = image.src;
        lightboxImage.alt = image.alt;
      }

      if (lightboxCaption) {
        lightboxCaption.textContent = image.caption;
      }

      if (lightboxCategories && image.categories) {
        lightboxCategories.innerHTML = '';
        image.categories.forEach((category) => {
          const badge = document.createElement('span');
          badge.className = 'px-2 py-1 rounded-full bg-accent-cyan text-black text-xs';
          badge.textContent = category;
          lightboxCategories.appendChild(badge);
        });
      }

      // Update pagination dots
      updatePaginationDots();
    }

    function updatePaginationDots() {
      const dots = paginationDots?.querySelectorAll('div');
      if (!dots) return;

      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.remove('bg-white/50');
          dot.classList.add('bg-accent-cyan');
        } else {
          dot.classList.add('bg-white/50');
          dot.classList.remove('bg-accent-cyan');
        }
      });
    }

    // Touch swipe handling
    function handleTouchStart(e: TouchEvent) {
      touchStartX = e.changedTouches[0].screenX;
    }

    function handleTouchEnd(e: TouchEvent) {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }

    function handleSwipe() {
      const swipeThreshold = 50; // minimum distance to register as swipe
      if (touchEndX < touchStartX - swipeThreshold) {
        // Swipe left (next)
        showImage(currentIndex + 1);
      } else if (touchEndX > touchStartX + swipeThreshold) {
        // Swipe right (previous)
        showImage(currentIndex - 1);
      }
    }

    galleryItems.forEach((item) => {
      item.addEventListener('click', () => {
        const index = parseInt(item.getAttribute('data-gallery-item') || '0');
        currentIndex = index;
        showImage(currentIndex);
        createPaginationDots();
        if (lightbox) {
          lightbox.classList.remove('hidden');
          lightbox.classList.add('flex');
          document.body.style.overflow = 'hidden'; // Prevent scrolling when lightbox is open
        }
      });
    });

    // Setup swipe events
    lightboxContent?.addEventListener('touchstart', handleTouchStart, false);
    lightboxContent?.addEventListener('touchend', handleTouchEnd, false);

    closeButton?.addEventListener('click', () => {
      if (lightbox) {
        lightbox.classList.add('hidden');
        lightbox.classList.remove('flex');
        document.body.style.overflow = ''; // Restore scrolling
      }
    });

    prevButton?.addEventListener('click', () => {
      showImage(currentIndex - 1);
    });

    nextButton?.addEventListener('click', () => {
      showImage(currentIndex + 1);
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && lightbox && !lightbox.classList.contains('hidden')) {
        lightbox.classList.add('hidden');
        lightbox.classList.remove('flex');
        document.body.style.overflow = ''; // Restore scrolling
      } else if (e.key === 'ArrowLeft' && !lightbox?.classList.contains('hidden')) {
        showImage(currentIndex - 1);
      } else if (e.key === 'ArrowRight' && !lightbox?.classList.contains('hidden')) {
        showImage(currentIndex + 1);
      }
    });

    // Close on backdrop click (but not when clicking the image)
    lightbox?.addEventListener('click', (e) => {
      if (e.target === lightbox || e.target === lightboxContent) {
        lightbox.classList.add('hidden');
        lightbox.classList.remove('flex');
        document.body.style.overflow = ''; // Restore scrolling
      }
    });

    // Prevent image click from closing lightbox
    lightboxImage?.addEventListener('click', (e) => {
      e.stopPropagation();
    });
  });
</script>

<style>
  /* Hide scrollbar in lightbox */
  #lightbox {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
  }

  #lightbox::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
  }

  /* Improve touch area for mobile */
  #lightbox-content {
    touch-action: pan-y; /* Allow vertical scrolling but capture horizontal for swipes */
    user-select: none; /* Prevent text selection during swipe */
  }
</style>
