---
interface Image {
  src: string;
  alt: string;
  caption?: string;
  categories?: string[];
  featured?: boolean;
}

interface Props {
  images: Image[];
  columns?: number;
}

const { images, columns = 3 } = Astro.props;
---

<div class="photo-gallery">
  <div class={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-${columns} gap-6`}>
    {images.map((image, index) => (
      <div
        class="gallery-item bg-background-card rounded-xl overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
        data-categories={image.categories ? JSON.stringify(image.categories) : "[]"}
      >
        <div class="aspect-video overflow-hidden relative group">
          <img
            src={image.src}
            alt={image.alt}
            class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
            data-gallery-item={index}
            loading="lazy"
          />
          <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 cursor-pointer"></div>
          {image.categories && image.categories.length > 0 && (
            <div class="absolute top-3 right-3 flex flex-wrap gap-1 justify-end">
              {image.categories.map(cat => (
                <span class="bg-accent-cyan text-background text-xs px-2 py-1 rounded-full">
                  {cat}
                </span>
              ))}
            </div>
          )}
          {image.featured && (
            <span class="absolute top-3 left-3 bg-accent-orange text-background text-xs px-2 py-1 rounded-full">
              Featured
            </span>
          )}
        </div>
        <div class="p-4">
          {image.caption && (
            <h3 class="text-text font-medium">{image.caption}</h3>
          )}
          <div class="mt-2 flex justify-between items-center">
            <span class="text-xs text-text-muted">Click to view</span>
            <button class="text-accent-cyan hover:text-accent-orange transition-colors" aria-label="View larger">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<div id="lightbox" class="fixed inset-0 bg-black/95 z-50 hidden flex items-center justify-center backdrop-blur-sm">
  <button id="close-lightbox" class="absolute top-4 right-4 text-white text-4xl hover:text-accent-cyan transition-colors">&times;</button>
  <button id="prev-image" class="absolute left-4 text-white text-5xl hover:text-accent-cyan transition-colors">&lt;</button>
  <button id="next-image" class="absolute right-4 text-white text-5xl hover:text-accent-cyan transition-colors">&gt;</button>
  <div class="max-w-5xl max-h-[85vh]">
    <img id="lightbox-image" src="" alt="" class="max-w-full max-h-[70vh] object-contain rounded-lg shadow-2xl" />
    <div class="mt-4 text-center">
      <div id="lightbox-caption" class="text-white text-lg font-medium"></div>
      <div id="lightbox-categories" class="flex gap-2 justify-center mt-2 flex-wrap"></div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryItems = document.querySelectorAll('[data-gallery-item]');
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxCaption = document.getElementById('lightbox-caption');
    const lightboxCategories = document.getElementById('lightbox-categories');
    const closeButton = document.getElementById('close-lightbox');
    const prevButton = document.getElementById('prev-image');
    const nextButton = document.getElementById('next-image');

    let currentIndex = 0;
    const images = Array.from(galleryItems).map((item) => {
      const img = item.querySelector('img');
      const index = parseInt(item.getAttribute('data-gallery-item') || '0');
      const galleryItem = item.closest('.gallery-item');
      const caption = galleryItem?.querySelector('h3')?.textContent || '';
      const categoriesAttr = galleryItem?.getAttribute('data-categories') || '[]';
      const categories = JSON.parse(categoriesAttr);
      return { src: img?.src || '', alt: img?.alt || '', caption, categories, index };
    });

    function showImage(index: number) {
      if (index < 0) index = images.length - 1;
      if (index >= images.length) index = 0;

      currentIndex = index;
      const image = images[index];

      if (lightboxImage) {
        lightboxImage.src = image.src;
        lightboxImage.alt = image.alt;
      }

      if (lightboxCaption) {
        lightboxCaption.textContent = image.caption;
      }

      if (lightboxCategories && image.categories) {
        lightboxCategories.innerHTML = '';
        image.categories.forEach(category => {
          const badge = document.createElement('span');
          badge.className = 'px-2 py-1 rounded-full bg-accent-cyan text-black text-xs';
          badge.textContent = category;
          lightboxCategories.appendChild(badge);
        });
      }
    }

    galleryItems.forEach((item) => {
      item.addEventListener('click', () => {
        const index = parseInt(item.getAttribute('data-gallery-item') || '0');
        currentIndex = index;
        showImage(currentIndex);
        if (lightbox) {
          lightbox.classList.remove('hidden');
          document.body.style.overflow = 'hidden'; // Prevent scrolling when lightbox is open
        }
      });
    });

    closeButton?.addEventListener('click', () => {
      if (lightbox) {
        lightbox.classList.add('hidden');
        document.body.style.overflow = ''; // Restore scrolling
      }
    });

    prevButton?.addEventListener('click', () => {
      showImage(currentIndex - 1);
    });

    nextButton?.addEventListener('click', () => {
      showImage(currentIndex + 1);
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && lightbox && !lightbox.classList.contains('hidden')) {
        lightbox.classList.add('hidden');
        document.body.style.overflow = ''; // Restore scrolling
      } else if (e.key === 'ArrowLeft') {
        showImage(currentIndex - 1);
      } else if (e.key === 'ArrowRight') {
        showImage(currentIndex + 1);
      }
    });

    // Close on backdrop click
    lightbox?.addEventListener('click', (e) => {
      if (e.target === lightbox) {
        lightbox.classList.add('hidden');
        document.body.style.overflow = ''; // Restore scrolling
      }
    });
  });
</script>
